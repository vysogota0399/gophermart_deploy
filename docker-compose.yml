################################################################################
x-app: &app
  platform: linux/arm64
  labels:
    logging: "promtail"
    logging_jobname: "containerlogs"
  depends_on:
    - loki
    - db
    - redis
    - kafka-1
    - kafka-2
    - kafka-3
    - gophermart-db-query
  tty: true
  stdin_open: true
  env_file:
    - .env
  restart:
    always

x-db: &db
  image: postgres:16-alpine
  restart: always
  container_name: gophermart-db
  shm_size: 128mb
  volumes:
    - pg_data:/var/lib/postgresql/data

x-kafka-exporter: &kafka-exporter
  image: docker.io/bitnami/kafka-exporter:${KAFKA_EXPORTER_VERSION}
  restart: unless-stopped
  command: ["--kafka.server=kafka-1:9092"]

x-zookeeper: &zookeeper
  image: docker.io/bitnami/zookeeper:${ZK_VERSION}
  volumes:
    - "zookeeper:/bitnami"
  environment:
    ALLOW_ANONYMOUS_LOGIN: "yes"

x-redpanda-console: &redpanda-console
  image: docker.redpanda.com/vectorized/console:v${REDPANDA_CONSOLE_VERSION}
  entrypoint: /bin/sh
  command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
  environment: 
    CONFIG_FILEPATH: /tmp/config.yml
    CONSOLE_CONFIG_FILE: |
      kafka:
        brokers: ["kafka-1:9092", "kafka-2:9092", "kafka-3:9092"]
        schemaRegistry:
          enabled: false
          urls: ["http://redpanda-0:8081"]
  ports:
    - ${REDPANDA_CONSOLE_PORT}:8080
  depends_on:
    - kafka-1
    - kafka-2
    - kafka-3

x-prometheus: &prometheus
  image: quay.io/prometheus/prometheus:${PROMETHEUS_VERSION}
  volumes:
    - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  ports:
    - ${PROMETHEUS_PORT}:9090

x-grafana: &grafana
  image: docker.io/grafana/grafana:${GRAFANA_VERSION}
  user: root
  restart: unless-stopped
  ports:
    - ${GRAFANA_PORT}:3000
  volumes:
    - grafana:/var/lib/grafana
    - ./infra/grafana/provisioning:/etc/grafana/provisioning
    - ./infra/grafana/dashboards:/var/lib/grafana/dashboards
    - ./infra/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yaml
  environment:
    GF_AUTH_ANONYMOUS_ENABLED: true
    GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
    GF_AUTH_DISABLE_LOGIN_FORM: true

x-kafka: &kafka
  build: &kafka-build
    context: .
    dockerfile: Dockerfile.kafka
    args:
      JMX_JAVAAGENT_VERSION: "${JMX_JAVAAGENT_VERSION}"
  environment: &kafka-env
    HOME: /opt/bitnami/kafka
    KAFKA_CFG_ZOOKEEPER_CONNECT: "zookeeper:2181"
    KAFKA_ENABLE_KRAFT: "no"
    KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
    ALLOW_PLAINTEXT_LISTENER: "yes"
    KAFKA_OPTS: >-
      -javaagent:/opt/bitnami/kafka/libs/jmx_prometheus_javaagent-${JMX_JAVAAGENT_VERSION}.jar=${JMX_JAVAAGENT_PORT}:/etc/kafka/prometheus/kafka.yml
  volumes:
    - ./infra/jmx-exporter/kafka.yml:/etc/kafka/prometheus/kafka.yml:ro
  depends_on:
    - zookeeper
  restart:
    always
################################################################################


services:
####################### APPLICATIONS
  gophermart-fake-orders:
    <<: *app
    container_name: gophermart-fake-orders
    build:
      context: gophermart_fake_orders
      dockerfile: .docker/Dockerfile
    command:
      ./api
    ports:
      - 8060:8060

  # ACRUAL_ADAPTER:
  gophermart-accrual_adapter-order_created_consumer:
    <<: *app
    container_name: gophermart-accrual_adapter-order_created_consumer
    build:
      context: gophermart_accrual_adapter
      dockerfile: .docker/Dockerfile
    command:
      ./order_created_consumer

  gophermart-accrual_adapter-order_created_daemons:
    <<: *app
    container_name: gophermart-accrual_adapter-order_created_daemons
    build:
      context: gophermart_accrual_adapter
      dockerfile: .docker/Dockerfile
    command:
      ./order_created_daemons

  gophermart-accrual_adapter-transaction_outbox:
    <<: *app
    container_name: gophermart-accrual_adapter-transaction_outbox
    build:
      context: gophermart_accrual_adapter
      dockerfile: .docker/Dockerfile
    command:
      ./transaction_outbox

  # BILLING:
  gophermart-billing-sync_commands:
    <<: *app
    container_name: gophermart-billing-sync_commands
    build:
      context: gophermart_billing
      dockerfile: .docker/Dockerfile
    command:
      ./billing_sync_commands

  gophermart-billing-accruals_consumer:
    <<: *app
    container_name: gophermart-billing-accruals_consumer
    build:
      context: gophermart_billing
      dockerfile: .docker/Dockerfile
    command:
      ./billing_accruals_consumer
  
  # PORTAL API
  gophermart-portal_api:
    <<: *app
    container_name: gophermart_portal-api
    build:
      context: gophermart
      dockerfile: .docker/api/Dockerfile
    ports:
      - 8000:8000
    command:
      ./api

  # QUERY
  gophermart-query-order_created_consumer:
    <<: *app
    build:
      context: gophermart_query
      dockerfile: .docker/Dockerfile
    container_name: gophermart_query-order_created_consumer
    command:
      ./order_created_consumer

  gophermart-query-order_updated_consumer:
    <<: *app
    build:
      context: gophermart_query
      dockerfile: .docker/Dockerfile
    container_name: gophermart-query-order_updated_consumer
    command:
      ./order_updated_consumer

  gophermart-query-transaction_processed_consumer:
    <<: *app
    build:
      context: gophermart_query
      dockerfile: .docker/Dockerfile
    container_name: gophermart-query-transaction_processed_consumer
    command:
      ./transaction_processed_consumer

  gophermart-query-grpc_server:
    <<: *app
    build:
      context: gophermart_query
      dockerfile: .docker/Dockerfile
    container_name: gophermart-query-grpc_server
    command:
      ./grpc_server

  gophermart-accruals-service:
    image: accrual_service

####################### INFRASTRUCTURE
  db:
    <<: *db
    ports:
      - 5432:5432
    container_name: gophermart-db
  
  gophermart-db-query:
    <<: *db
    ports:
      - 5433:5432
    container_name: gophermart-db-query

  redis:
    image: redis:7-alpine
    container_name: gophermart-redis
    volumes:
      - redis:/data
    ports:
      - 6379:6379

  loki:
    image: grafana/loki:latest
    container_name: gophermart-loki
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image:  grafana/promtail:latest
    container_name: gophermart-promtail_app
    volumes:
      - ./infra/promtail/docker-config.yaml:/etc/promtail/docker-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/docker-config.yaml
    depends_on:
      - loki

  zookeeper:
    <<: *zookeeper
    container_name: gophermart-zookeeper

  kafka-ui:
    <<: *redpanda-console
    container_name: gophermart-kafka-ui

  kafka-1:
    <<: *kafka
    container_name: kafka-1
    environment:
      <<: *kafka-env
      KAFKA_BROKER_ID: 1

  kafka-2:
    <<: *kafka
    container_name: kafka-2
    environment:
      <<: *kafka-env
      KAFKA_BROKER_ID: 2

  kafka-3:
    <<: *kafka
    container_name: kafka-3
    environment:
      <<: *kafka-env
      KAFKA_BROKER_ID: 3

  grafana:
    <<: *grafana
    container_name: gophermart-grafana

  prometheus:
    <<: *prometheus
    container_name: gophermart-prometheus

  kafka-exporter:
    <<: *kafka-exporter
    container_name: gophermart-kafka-exporter

networks:
  default:
    name: gophermart-network

volumes:
  pg_data:
  redis:
  grafana:
  zookeeper:
